#+TITLE: Bryley's Emacs Config
#+AUTHOR: Bryley Hayter

* Package Management Setup
  
The following code is used to setup 'use-package'

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(
      ("melpa" . "https://melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")
      ("elpa" . "https://elpa.gnu.org/packages/")
  ))

  (package-initialize)

  (setq use-package-always-ensure t)              ;; Always use :ensure by default

  (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)
  )
  (eval-when-compile (require 'use-package))      ;; Use 'use-package'
#+end_src

* Package Setups
** Evil mode
Evil mode is a mode that turns emacs into vim.
#+begin_src emacs-lisp
  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq select-enable-clipboard nil) ;; Unlink system clipboard with evil registers
    (setq evil-undo-system 'undo-redo) ;; Enable undo system
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil) ;; This will make tab work correctly in org mode
    (evil-mode t)
    (modify-syntax-entry ?_ "w")  ;; Make _ be apart of evil 'words'
    ;; (evil-ex-define-cmd "q[uit]" 'kill-buffer-and-window)
    )
  ;; Allows evil to work in more locations
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer package-menu magit))
    (evil-collection-init)
    )
  ;; Required so clipboard works like vim (+ register is system clipboard)
  (use-package xclip
    :config
    (xclip-mode)
  )

  ;; Makes gc<motion> comment the code in a file
  (use-package evil-commentary
    :config
    (evil-commentary-mode)
    )

  ;; Adds the surround plugin (ds' will delete surrounding quotes, etc.)
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1)
  )
#+end_src

*** Closing last window
The default behaviour when closing the last window with ~:q~ ex command in emacs is to close the entire frame even if there are other workgroups. Below is my implementation to instead of closing the frame altogether if the last window is closed then open the dashboard.

#+begin_src emacs-lisp
  (defun bryley/on-quit ()
    (interactive)
    (if (<= (length (window-list)) 1)
        ;; Switch to dashboard if last window
        (switch-to-buffer "*dashboard*")
        ;; Else delete window as usual
        (evil-window-delete)
    )
  )

  (evil-ex-define-cmd "q[uit]" 'bryley/on-quit)
#+end_src

** Org mode
*** Main setup
Org mode is a super useful tool for note taking and task organization.

First lets setup a hook function that will be called whenever a org mode file is loaded.

#+begin_src emacs-lisp
  (defun bryley/org-mode-setup ()
    ;;(org-indent-mode)
    ;; (variable-pitch-mode t)
    (visual-line-mode t)
    (fly-spell-mode t) ;; Enables spellcheck
  )
#+end_src

#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-startup-indented t) ;; Indenting is handled automatically by org
    (setq org-log-done 'time)     ;; When marking a TODO item as done record the closed time
    (setq org-todo-keywords-for-agenda '((sequence "TODO" "INPROGRESS" "DONE")))
    ;; Adds entry to ,b to create emacs-lisp code blocks
    (setq org-structure-template-alist '(("b" . "src emacs-lisp")
                                         ("a" . "export ascii")
                                         ("c" . "center")
                                         ("C" . "comment")
                                         ("e" . "example")
                                         ("E" . "export")
                                         ("h" . "export html")
                                         ("l" . "export latex")
                                         ("q" . "quote")
                                         ("s" . "src")
                                         ("v" . "verse")))
    :hook (org-mode . bryley/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    )
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-files '(
      "~/Dropbox/org_files"
  ))
#+end_src

*** org-superstar
Package for adding bullets to org documents.

#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode)
    )
#+end_src

*** evil-org

Evil-org is a helper for intergrating org with evil mode so that vim keybindings work as expected in org mode.

#+begin_src emacs-lisp
  (use-package evil-org
    :after (evil org)
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
  )
#+end_src

*** org-tempo
org-tempo contains a few useful org command that no longer exist such as =<s= then pressing tab in org mode to open a source block.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    )
#+end_src

** Projectile
Projectile gives you lots of useful commands for managing projects.

#+begin_src emacs-lisp
    (use-package projectile
      :init
      (setq projectile-switch-project-action #'projectile-dired)
      (setq projectile-indexing-method 'alien)
      (setq projectile-project-search-path '("~/Documents" ("~/dotfiles" . 0)))

      ;; :hook (after-init . projectile-mode)
    )
    (projectile-mode +1)

  ;;  (use-package counsel-projectile
  ;;    :config (counsel-projectile-mode)
  ;;  )
#+end_src

** Magit

Magit is a git client built for emacs.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Consult

Consult is a handy completion package (like counsil) that has similarities with telescope in neovim.

#+begin_src emacs-lisp
  (use-package consult
    ;; :init
    ; Sets the default project root to be closest git project
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )
#+end_src

** General.el (Key bindings)

General is a keybinding plugin that allows for easy kindbindings to be setup with a leader key.

TODO move keybindings to here, look at https://github.com/jakebox/jake-emacs/blob/main/jake-emacs/init.org for inspiration.

*** SPC Leader

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    ;; SPC prefix
    (general-define-key
     :states '(normal motion visual)
     :keymaps 'override
     :prefix "SPC"

     ;; Top level shortcuts
     "SPC" '(execute-extended-command :which-key "M-x")
     "d"   '(find-dired :which-key "dired")
     "r"   '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "reload config")
     "o"   '(find-file :which-key "open")
     "c"   '(numpydoc-generate :which-key "generate comments")


     ;; Help commands
     "h"   '(nil :which-key "help")
     "hv"  '(describe-variable :which-key "variable")
     "hf"  '(describe-function :which-key "function")
     "hx"  '(describe-command :which-key "command")
     "hm"  '(describe-mode :which-key "mode")
     "hk"  '(describe-key :which-key "key")
     "hb"  '(describe-bindings :which-key "bindings")


     ;; Find commands
     "f"   '(nil :which-key "find")
     ;; "ff"  '(consult-find :which-key "Find file")
     "ff"  '(projectile-find-file :which-key "find file")
     "fr"  '(consult-recent-file :which-key "find recent")
     "fh"  '(consult-org-heading :which-key "find heading")
     "fb"  '(consult-buffer :which-key "find buffer")
     "fg"  '(consult-ripgrep :which-key "grep files")


     ;; Buffers
     "b"   '(nil :which-key "buffers")
     "bh"  '(centaur-tabs-backward-tab :which-key "backward buffer")
     "bl"  '(centaur-tabs-forward-tab :which-key "forward buffer")
     ;; "bq"  '(kill-buffer :which-key "kill buffer")
     "bq"  '((lambda () (interactive) (kill-buffer (current-buffer))) :which-key "kill buffer")


     ;; eyebrowse commands
     "a"   '(nil :which-key "eyebrowse")
     "af"  '(eyebrowse-switch-to-window-config :which-key "find window config")
     "an"  '(eyebrowse-next-window-config :which-key "next eyebrowse config")
     "ap"  '(eyebrowse-prev-window-config :which-key "prev eyebrowse config")
     ;; Vim-like keybindings
     "al"  '(eyebrowse-next-window-config :which-key "next eyebrowse config")
     "ah"  '(eyebrowse-prev-window-config :which-key "prev eyebrowse config")

     "ac"  '(eyebrowse-create-window-config :which-key "create eyebrowse config")
     "a,"  '(eyebrowse-rename-window-config :which-key "rename eyebrowse config")
     "aq"  '(eyebrowse-close-window-config :which-key "close eyebrowse config")


     ;; Projectile
     "p"   '(nil :which-key "projectile")
     "pp"  '(projectile-switch-project :which-key "switch project")

     )


    ;; Ctl-A leader (eyebrowse and tmux)
    (general-define-key
     :keymaps 'override
     :prefix "C-a"
     "f"  '(eyebrowse-switch-to-window-config :which-key "find window config")
     "n"  '(eyebrowse-next-window-config :which-key "next eyebrowse config")
     "p"  '(eyebrowse-prev-window-config :which-key "prev eyebrowse config")

     ;; Vim-like keybindings
     "l"  '(eyebrowse-next-window-config :which-key "next eyebrowse config")
     "h"  '(eyebrowse-prev-window-config :which-key "prev eyebrowse config")

     "c"  '(eyebrowse-create-window-config :which-key "create eyebrowse config")
     ","  '(eyebrowse-rename-window-config :which-key "rename eyebrowse config")
     "q"  '(eyebrowse-close-window-config :which-key "close eyebrowse config")
     )
    )
#+end_src

*** Application Leader (",")
**** Org mode
These are org-mode related keybindings that will be available in org mode.

#+begin_src emacs-lisp
  (general-def
    :states 'normal
    :keymaps 'org-mode-map
    :prefix ","

    "t"   '(org-todo :which-key "Org todo")
    "c"   '(nil :which-key "clocking")
    "cd"  '(org-deadline :which-key "deadline")
    "cs"  '(org-schedule :which-key "schedule")
    "q"   '(org-set-tags :which-key "tags")
    "b"   '(org-insert-structure-template :which-key "create '#+begin_' block")
  )
#+end_src

**** LSP mode

For all programming things
#+begin_src emacs-lisp
  (general-def
    :states 'normal
    :keymaps 'lsp-mode-map
    :prefix ","

    "l"    '(nil :which-key "lsp")
    "ld"   '(consult-lsp-diagnostics :which-key "diagnostics")
    "lr"   '(lsp-rename :which-key "rename")
    "ls"   '(lsp-treemacs-symbols-toggle :which-key "toggle symbols view")
    
    "lg"   '(nil :which-key "goto")
    "lgd"   '(lsp-find-definition :which-key "definition")
    "lgr"   '(lsp-find-references :which-key "references")
    "lgt"   '(lsp-find-type-definition :which-key "type definition")

  )
#+end_src

*** Global overrides

**** Treemacs
Make treemacs more like nvim.tree keybindings

#+begin_src emacs-lisp
  ;; TODO make this work because it is disabling Control V in other buffers as well
  ;; (general-def
  ;;   :states '(normal motion visual)
  ;;   ;; :keymaps 'override
  ;;   :keymaps 'treemacs-mode-map

  ;;   "C-v" 'treemacs-visit-node-horizontal-split
  ;;   "C-x" 'treemacs-visit-node-vertical-split
  ;; )
#+end_src

**** Main overrides
Here is a list of keybindings that override default behaviour.

#+begin_src emacs-lisp
  (general-def
    :keymaps 'override

    "<f2>" 'treemacs
    "<f4>" 'vterm-toggle
    ;; "<f2>" '(lambda () (interactive) (bryley/toggle_treemacs))
     ;; "r"   '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload config")

    ;; Emacs --------
    ;; "ß" 'evil-window-next ;; option-s
    ;; "Í" 'other-frame ;; option-shift-s
    ;; "C-S-B" 'counsel-switch-buffer
    ;; "∫" 'counsel-switch-buffer ;; option-b
    ;; "s-o" 'jib-hydra-window/body

    ;; Remapping normal help features to use Counsel version
    ;; "C-h v" 'counsel-describe-variable
    ;; "C-h o" 'counsel-describe-symbol
    ;; "C-h f" 'counsel-describe-function
    ;; "C-h F" 'counsel-describe-face

    ;; Editing ------
    ;; "M-v" 'simpleclip-paste
    ;; "M-V" 'evil-paste-after ;; shift-paste uses the internal clipboard
    ;; "M-c" 'simpleclip-copy
    ;; "M-u" 'capitalize-dwim ;; Default is upcase-dwim
    ;; "M-U" 'upcase-dwim ;; M-S-u (switch upcase and capitalize)
    ;; "C-c u" 'jib/split-and-close-sentence

    ;; Utility ------
    ;; "C-c c" 'org-capture
    ;; "C-c a" 'org-agenda
    ;; "C-s" 'counsel-grep-or-swiper ;; Large files will use grep (faster)
    ;; "s-\"" 'ispell-word ;; that's super-shift-'
    ;; "M-+" 'jib/calc-speaking-time

    ;; super-number functions
    ;; "s-1" 'mw-thesaurus-lookup-dwim
    ;; "s-2" 'ispell-buffer
    ;; "s-3" 'revert-buffer
    ;; "s-4" '(lambda () (interactive) (counsel-file-jump nil jib/dropbox))
    )
#+end_src
** Language Server Protocol

LSPs are useful for autocompleting and understanding code as you write it.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    ;; Temp
    (setq lsp-keymap-prefix "C-c l")
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp
  )
#+end_src

Better alternatives to commands using consult.

#+begin_src emacs-lisp
    (use-package consult-lsp
      :after (consult lsp))
#+end_src

Have a dropdown for code completions.

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :custom
    (company-idle-delay 0.0)   ;; No delay
    (company-minimum-prefix-length 1) ;; Open suggestions after 1 character typed
    (company-selection-wrap-around t) ;; Wrap around when reaching bottom/top
  )

  ;; Better looking dropdown
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-ui
    :after general
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-position 'at-point)
    :config
    :general
    (general-nmap
      :predicate 'lsp-mode
      "K" 'lsp-ui-doc-glance)
    ;; (general-nmap
    ;;   :predicate 'lsp-mode
    ;;   "gs" 'lsp-signature-activate)
    (general-nmap
      :predicate 'lsp-mode
      "gr" 'lsp-ui-peek-find-references)
    ;; (general-nmap
    ;;   :predicate 'lsp-mode
    ;;   "gd" 'lsp-ui-peek-find-definitions)
  )
#+end_src

#+begin_src emacs-lisp

  ;; Function switches will toggle the symbols page for lsp-treemacs
  (defun lsp-treemacs-symbols-toggle ()
    "Toggle the lsp-treemacs-symbols buffer."
    (interactive)
    (if (get-buffer "*LSP Symbols List*")
        (kill-buffer "*LSP Symbols List*")
      (progn (lsp-treemacs-symbols)
             (other-window -1))))

  (use-package lsp-treemacs
    :after '(lsp treemacs)
    :config
    (lsp-treemacs-sync-mode t)
    )
  ;; :commands lsp-treemacs-errors-list)
#+end_src

#+begin_src emacs-lisp
  ;;    (use-package lsp-mode
  ;;      :commands (lsp lsp-deferred)
  ;;      :hook (lsp-mode . efs/lsp-mode-setup)
  ;;      :init
  ;;      (setq lsp-keymap-prefix "SPC l")
  ;;      :config
  ;;      (lsp-enable-which-key-integration t)
  ;;    )
;;  (use-package lsp-mode
;;    :init
;;    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
;;    (setq lsp-keymap-prefix "SPC l")
;;    :hook (
;;           (python-mode . lsp)
;;           (lsp-mode . lsp-enable-which-key-integration))
;;    :commands lsp
;;    )
  ;;    (use-package lsp-ui
  ;;      :after general
  ;;      :commands lsp-ui-mode
  ;;      :config
  ;;       :general
  ;; 	(general-nmap
  ;; 	  :predicate 'lsp-mode
  ;; 		"K" 'lsp-ui-doc-glance)
  ;; 	(general-nmap
  ;; 	  :predicate 'lsp-mode
  ;; 		"gs" 'lsp-signature-activate)
  ;; 	(general-nmap
  ;; 	  :predicate 'lsp-mode
  ;; 		"gr" 'lsp-ui-peek-find-references)
  ;; 	(general-nmap
  ;; 	  :predicate 'lsp-mode
  ;; 		"gd" 'lsp-ui-peek-find-definitions)
  ;; 	)
 ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

*** Python
Setup pyright LSP server for python.

#+begin_src emacs-lisp
    (use-package lsp-pyright
      :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp)
                          )
            )
    )  ; or lsp-deferred
#+end_src

** Treesitter

Treesitter is a language parser and ties in well with syntax highlighting.

#+begin_src emacs-lisp

  (defun enable-tree-sitter ()
    (interactive)
    (tree-sitter-mode)
    (tree-sitter-hl-mode)
  )

  (use-package tree-sitter
    :hook
    (python-mode . enable-tree-sitter)
    (web-mode . enable-tree-sitter)
    ;; TODO add more hooks
    :config
    ;; (global-tree-sitter-mode)
    ;; (add-hook prog-mode-hook #'tree-sitter-mode)
    )
  (use-package tree-sitter-langs
    :after treesitter
    :config
    (tree-sitter-require 'python)
    (tree-sitter-require 'javascript)
    (tree-sitter-require 'html)
    (tree-sitter-require 'css)
    (tree-sitter-require 'typescript)
    (tree-sitter-require 'json)
    (tree-sitter-require 'bash)
  )
#+end_src

#+RESULTS:

** yasnippet

Yasnippet is a snippet handler for emacs.

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode t)
  )
#+end_src

** Numpy docs (Python)

Used for generating numpy documentation in python code.

#+begin_src emacs-lisp
  (use-package numpydoc
    :custom
    (numpydoc-insertion-style 'yas)
  )
#+end_src

** Treemacs
Neotree is a file explorer package.

#+begin_src emacs-lisp
  (use-package treemacs
    :custom
    (treemacs--project-follow-delay 0.1)
    :config
    ;; This will update with projectile automatically to show the correct project
    ;; If this isn't working call treemacs-display-current-project-exclusively
    (treemacs-project-follow-mode)
  )

  (use-package treemacs-evil
    :after (treemacs evil)
  )
  (use-package treemacs-projectile
    :after (treemacs projectile)
  )
  ;; Icons for dired from treemacs
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
  )
#+end_src

** Rainbow Delimiters

Adds rainbox highlighted brackets to make it easier to see bracket links.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
  )
#+end_src

** helpful
helpful is a package that offers an alternate better help buffer page with colours.

#+begin_src emacs-lisp
  (use-package helpful
    ;; :custom
    ;; (counsel-describe-function-function #'helpful-callable)
    ;; (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
  )
#+end_src

** Theme
*** doom-themes
The main theme used is 'doom-one' from 'doom-themes' package

#+begin_src emacs-lisp
(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t)
  :config
  (load-theme 'doom-one t)
)
#+end_src

*** VSCode theme

Used just for testing

#+begin_src emacs-lisp
  (use-package vscode-dark-plus-theme
  )
#+end_src

*** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode t)
  )
#+end_src

** Dashboard
Dashboard is used to include a dashboard when emacs opens up.

#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-items '((recents . 5) (agenda . 5) (projects . 5)))
    :config
    (dashboard-setup-startup-hook)
  )
#+end_src

** Which Key
Which key is a package that helps with showing the available options when doing key chords.
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-idle-delay 0.3)
    :config
    (which-key-mode)
  )
#+end_src

** Vertico
Vertico is a lightweight alternative to ivy/helm completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (setq vertico-cycle t)
    (vertico-mode)
  )
#+end_src

Orderless is an extention to vertico which makes searching more like a fuzzy search.

#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion))))
  )
#+end_src

savehist is an extention to vertico which saves the history and shows most recent at the top for convenience.

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode)
  )
#+end_src

Enable richer annotations using the Marginalia package.

#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

** eyebrowse
Eyebrowse is a window layout manager and is useful for emulating a tmux" like environment in emacs where multiple projects can exist on separate buffers.

#+begin_src emacs-lisp
  (use-package eyebrowse
    :init
    (setq eyebrowse-wrap-around t)  ;; Will wrap back to beginning if cycled too far
    (setq eyebrowse-new-workspace "*dashboard*")  ;; Makes default buffer on new workspaces the dashboard
    :config
    (eyebrowse-mode)
  )
#+end_src

** Ivy (OLD delete later)
TODO switch from ivy to vertico

Ivy is a fuzzy finder tool that integrates itself within Emacs.

#+begin_src emacs-lisp
;;  (use-package ivy
;;    :config
;;    (ivy-mode)
;;  )
#+end_src

Ivy rich is an extention to ivy that makes ivy have even better things.

#+begin_src emacs-lisp
;;  (use-package ivy-rich
;;    :init
;;    (ivy-rich-mode t)
;;  )
#+end_src

** Counsel
Counsel is another ivy extention that allows for better default keybindings for find file M-x and so on.

#+begin_src emacs-lisp
;;    (use-package counsel
;;    :bind (("M-x" . counsel-M-x)
;;	   ("C-x b" . counsel-ibuffer)
;;	   ("C-x C-f" . counsel-find-file)
;;	   :map minibuffer-local-map
;;	   ("C-r" . 'counsel-minibuffer-history))
;;    )
#+end_src

** All the Icons
Extra icon support. Note that the code below will run 'all-the-icons-install-fonts' only once when the package is not installed.

#+begin_src emacs-lisp
(use-package all-the-icons
  :config
  (unless (package-installed-p 'all-the-icons)
    (all-the-icons-install-fonts)
  )
)
#+end_src

** Scroll on Jump

Package used to smooth scrolling.

#+begin_src emacs-lisp
  (use-package scroll-on-jump
    :custom
    (scroll-on-jump-smooth nil)
    (scroll-on-jump-duration 0.7)
    :config
    (scroll-on-jump-advice-add evil-undo)
    (scroll-on-jump-advice-add evil-redo)
    (scroll-on-jump-advice-add evil-jump-item)
    (scroll-on-jump-advice-add evil-jump-forward)
    (scroll-on-jump-advice-add evil-jump-backward)
    (scroll-on-jump-advice-add evil-ex-search-next)
    (scroll-on-jump-advice-add evil-ex-search-previous)
    (scroll-on-jump-advice-add evil-forward-paragraph)
    (scroll-on-jump-advice-add evil-backward-paragraph)
    (scroll-on-jump-advice-add evil-goto-mark)
    (scroll-on-jump-with-scroll-advice-add evil-goto-line)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-down)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-up)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-center)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-top)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-bottom)
  )
#+end_src

** pyvenv
pyvenv allows us to easily select virutal environments

TODO update headings and stuff

#+begin_src emacs-lisp
  ;; (use-package auto-virtualenv
  ;;   :hook
  ;;   (python-mode-hook . auto-virtualenv-set-virtualenv)
  ;;   ;; Activate on changing buffers
  ;;   (window-configuration-change-hook . auto-virtualenv-set-virtualenv)
  ;;   ;; Activate on focus in
  ;;   (focus-in-hook . auto-virtualenv-set-virtualenv)
  ;; )
#+end_src

#+begin_src emacs-lisp
  (use-package pyvenv)

  (defun activate ()
      (interactive)
      (pyvenv-activate ".venv")
      (lsp-restart-workspace)
      (treemacs-display-current-project-exclusively)
      (message "Activated workspace")
  )
#+end_src

** vterm
Superior terminal emulation inside of Emacs.

#+begin_src emacs-lisp
  (use-package vterm)

  ;; Simple package to toggle vterm at the bottom of the screen
  (use-package vterm-toggle)
  ;; This is to change the height of the terminal by default
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda(bufname _) (with-current-buffer bufname
                                      (or (equal major-mode 'vterm-mode)
                                          (string-prefix-p vterm-buffer-name bufname))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3)))
#+end_src

** Centaur tabs
Centaur tabs offers a tab bar at the top of frames for each buffer in the project giving a much more IDE-like feel.

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :custom
    (centaur-tabs-excluded-prefixes '("*" " *"))
    (centaur-tabs-style "wave")
    (centaur-tabs-set-icons t)
    (centaur-tabs-gray-out-icons 'buffer)
    (centaur-tabs-set-modified-marker t)
    (centaur-tabs-modified-marker "*")
    :config
    ;; Don't include any automatic/default buffers as tabs
    (setq centaur-tabs-excluded-prefixes '("*" " *"))
    (centaur-tabs-mode t)
  )
#+end_src

* Global Configurations
** Must-have Configurations
*** GUI Settings

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)  ;; Removes the startup page

  (menu-bar-mode -1)                ;; Disables the "File", "Edit" and stuff at the top
  (scroll-bar-mode -1)              ;; Disables scrollbar
  (tool-bar-mode -1)                ;; Disables tool-bar
  (tooltip-mode -1)                 ;; Disables tooltips

  ;; Transparent window
  (set-frame-parameter (selected-frame) 'alpha '(97 97))
#+end_src

*** Line numbers

Enables line numbers.

#+begin_src emacs-lisp
  (setq display-line-numbers-type 'visual)  ;; Use relative line numbers (visually shown)
  (setq-default display-line-numbers-width 3)
  (global-display-line-numbers-mode t)                 ;; Enable line numbers
  (toggle-truncate-lines nil)     ;; Disable line wrapping
#+end_src

*** Extra settings
Keeps 3 lines from cursor at top and bottom of buffer when scrolling like ~scrolloff~ setting in vim, also stop cursor from being centered when it goes offscreen.

#+begin_src emacs-lisp
  (setq scroll-margin 3)
  (setq scroll-step 1)
#+end_src

Highlights selected line a different colour to make it easier to see.
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

Automatically select the help window when it opens (vim's default behavior[
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

*** Tab bar
Tab bar is emacs built in way for having multiple projects in the same frame. Similar to how tmux works in a terminal.

#+begin_src emacs-lisp
  ;; (setq tab-bar-position t)         ;; Sets the tab to be at the bottom instead of the top
  ;;(tab-bar-mode t)                  ;; Enables tab bar at the top of the screen (like tmux functionality inside emacs)
#+end_src

** Key bindings
*** Zooming in and out

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

*** Clipboard
Make it so that Ctrl-Shift-V pastes from clipboard.

#+begin_src emacs-lisp
(global-set-key (kbd "C-S-V") 'clipboard-yank)
#+end_src

*** General
Below are keybindings that use a leader key (Space) using the package ~general~.
#+begin_src emacs-lisp
;;  (nvmap :keymaps 'override :prefix "SPC"
;;         "SPC"   '(counsel-M-x :which-key "M-x")
;;         "f f"   '(projectile-find-file :which-key "Find file")
;;         "f b"   '(counsel-buffer-or-recentf :which-key "Find buffer")
;;         "r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload emacs config")
;;         "p"     '(projectile-command-map :which-key "Projectile Commands")
;;         "l"     '(lsp-map :which-key "LSP Commands" :predicate '(lsp-mode))
;;  )
;;  (nvmap :keymaps 'override :prefix "SPC"
;;         ;; "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
;;         ;; "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
;;         ;; "m ."   '(counsel-org-goto :which-key "Counsel org goto")
;;         ;; "m e"   '(org-export-dispatch :which-key "Org export dispatch")
;;         ;; "m f"   '(org-footnote-new :which-key "Org footnote new")
;;         ;; "m h"   '(org-toggle-heading :which-key "Org toggle heading")
;;         ;; "m i"   '(org-toggle-item :which-key "Org toggle item")
;;         ;; "m n"   '(org-store-link :which-key "Org store link")
;;         ;; "m o"   '(org-set-property :which-key "Org set property")
;;         "o t"   '(org-todo :which-key "Org todo")
;;         "o d"   '(org-deadline :which-key "Org Deadline")
;;         "o s"   '(org-schedule :which-key "Org Schedule")
;;         "o q"   '(org-set-tags :which-key "Org Tags")
;;         ;; "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
;;         ;; "m B"   '(org-babel-tangle :which-key "Org babel tangle")
;;         ;; "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
;;         ;; "m T"   '(org-todo-list :which-key "Org todo list")
;;         "o a"   '(org-agenda :which-key "Org agenda")
;;         )
#+end_src

Escape with escape like in Vim.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-c") 'kill-buffer)
#+end_src

** Font

#+begin_src emacs-lisp
 (set-frame-font "Hack Nerd Font 14" nil t)
   (set-face-attribute 'default nil
     :font "Hack Nerd Font 14"
     :weight 'medium
   )
#+end_src

* Notes
Here are some useful things I have found along the way while transitioning to emacs from neovim:

** Expression register

The expression register in evil (~=~ register) behaves mostly like it does in vim however it will evaluate elisp instead.

That means you can do (in insert mode):

~<C-r>=(some-emacs-function argument)<RET>~

This will put the output of the elisp function at the cursor.

I found this confusing as vim offers the =system()= function when in the expression register to run bash commands.

To mymic this behaviour in emacs you can use the ~shell-command-to-string~ function like so:

*Vim way*:
~<C-r>=system("ls ~/Documents")<RET>~

*Emacs way*:
~<C-r>=(shell-command-to-string "ls ~/Documents")<RET>~

This will output the files in your Documents folder at your cursor.

Below is an alias I created to make it a little easier by using ~(system cmd)~ instead of ~(shell-command-to-string cmd)~.

#+begin_src emacs-lisp
  (defun system (command)
    (interactive)
    (shell-command-to-string command)
  )
#+end_src
